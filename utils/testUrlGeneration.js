#!/usr/bin/env node

/**
 * Script para probar la generaci√≥n de URLs de recuperaci√≥n
 * Uso: node utils/testUrlGeneration.js
 */

require('dotenv').config();
const http = require('http');

async function testUrlGeneration() {
  console.log('üîó PRUEBA DE GENERACI√ìN DE URLs');
  console.log('='.repeat(50));

  console.log('\nüìã Configuraci√≥n actual:');
  console.log(`NODE_ENV: ${process.env.NODE_ENV}`);
  console.log(`FRONTEND_URL_PROD: ${process.env.FRONTEND_URL_PROD}`);
  console.log(`FRONTEND_URL_DEV: ${process.env.FRONTEND_URL_DEV}`);

  // Crear un usuario de prueba en la base de datos primero
  console.log('\nüîê Probando generaci√≥n de URL de recuperaci√≥n...');

  const emailData = {
    email: 'admin@example.com', // Usa un email que exista en tu BD
  };

  const postData = JSON.stringify(emailData);

  const options = {
    hostname: 'localhost',
    port: 3001,
    path: '/users/forgot-password',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData),
      Host: 'localhost:3001', // Importante: esto har√° que detecte localhost
    },
  };

  return new Promise((resolve) => {
    console.log('üì° Enviando petici√≥n de recuperaci√≥n...');
    console.log(`üìß Email: ${emailData.email}`);
    console.log(`üåê Host header: localhost:3001`);

    const req = http.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        console.log(`\nüìä Status: ${res.statusCode}`);

        try {
          const response = JSON.parse(data);

          if (res.statusCode === 200) {
            console.log('‚úÖ ¬°Recuperaci√≥n exitosa!');
            console.log(
              'üìß El email deber√≠a contener un enlace hacia localhost',
            );
          } else if (res.statusCode === 404) {
            console.log(
              '‚ö†Ô∏è  Usuario no encontrado, pero la URL se habr√≠a generado correctamente',
            );
            console.log(
              'üí° Crea un usuario con este email o usa un email existente',
            );
          } else {
            console.log('‚ùå Error inesperado:', response.message);
          }
        } catch (error) {
          console.log('‚ùå Error parseando respuesta:', error.message);
        }

        // Ahora hacer la misma prueba simulando producci√≥n
        console.log('\n' + '='.repeat(30));
        console.log('üåê Probando como si fuera producci√≥n...');

        const prodOptions = {
          ...options,
          headers: {
            ...options.headers,
            Host: 'www.contrerasrobledo.com.do', // Simular host de producci√≥n
          },
        };

        const prodReq = http.request(prodOptions, (prodRes) => {
          let prodData = '';
          prodRes.on('data', (chunk) => {
            prodData += chunk;
          });
          prodRes.on('end', () => {
            console.log(`üìä Status (prod): ${prodRes.statusCode}`);
            console.log(
              'üìß Con host de producci√≥n, el enlace apuntar√≠a al sitio real',
            );
            resolve();
          });
        });

        prodReq.on('error', () => resolve());
        prodReq.write(postData);
        prodReq.end();
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå Error:', error.message);
      console.log('üí° Aseg√∫rate de que el servidor est√© corriendo');
      resolve();
    });

    req.write(postData);
    req.end();
  });
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testUrlGeneration().catch(console.error);
}

module.exports = { testUrlGeneration };
